const {
  i64tof32_wasm,
  u64tof32_wasm,
  i64tof32_wasm2js,
  u64tof32_wasm2js
} = require("..");

const IMPRECISE = true;

var values = [
  [0n],
  [1n],

  [9007199791611904n],
  [9007199791611905n, IMPRECISE],
  [9007199791611906n],

  [9008027646558206n],
  [9008027646558207n, IMPRECISE],
  [9008027646558208n],

  [9008028720300032n],
  [9008028720300033n, IMPRECISE],
  [9008028720300034n],

  [9008029794041854n],
  [9008029794041855n, IMPRECISE],
  [9008029794041856n],

  [9010073124732928n],
  [9010073124732929n, IMPRECISE],
  [9010073124732930n],

  [9010074198474750n],
  [9010074198474751n, IMPRECISE],
  [9010074198474752n],

  [9010075272216576n],
  [9010075272216577n, IMPRECISE],
  [9010075272216578n],

  [9011453956718592n],
  [9011453956718593n, IMPRECISE],
  [9011453956718594n],

  [9011455030460414n],
  [9011455030460415n, IMPRECISE],
  [9011455030460416n],

  [99107190693953527n],
  [99107190693953528n, IMPRECISE],
  [99107190693953529n, IMPRECISE],
  [99107190693953530n, IMPRECISE],
  [99107190693953531n, IMPRECISE],
  [99107190693953532n, IMPRECISE],
  [99107190693953533n, IMPRECISE],
  [99107190693953534n, IMPRECISE],
  [99107190693953535n, IMPRECISE],
  [99107190693953536n],

  [9223372036854775806n],
  [9223372036854775807n],
  [9223372036854775808n],

  [18446743523953737720n, IMPRECISE],
  [18446743523953737721n, IMPRECISE],
  [18446743523953737722n, IMPRECISE],
  [18446743523953737723n, IMPRECISE],
  [18446743523953737724n, IMPRECISE],
  [18446743523953737725n, IMPRECISE],
  [18446743523953737726n, IMPRECISE],
  [18446743523953737727n, IMPRECISE],
  [18446743523953737728n],

  [18446744073709551615n],
  [18446744073709551616n, IMPRECISE],

  [-1n],

  [-9007199791611904n],
  [-9007199791611905n, IMPRECISE],
  [-9007199791611906n],

  [-9008027646558206n],
  [-9008027646558207n, IMPRECISE],
  [-9008027646558208n],

  [-9008028720300032n],
  [-9008028720300033n, IMPRECISE],
  [-9008028720300034n],

  [-9008029794041854n],
  [-9008029794041855n, IMPRECISE],
  [-9008029794041856n],

  [-9010073124732928n],
  [-9010073124732929n, IMPRECISE],
  [-9010073124732930n],

  [-9010074198474750n],
  [-9010074198474751n, IMPRECISE],
  [-9010074198474752n],

  [-9010075272216576n],
  [-9010075272216577n, IMPRECISE],
  [-9010075272216578n],

  [-9011453956718592n],
  [-9011453956718593n, IMPRECISE],
  [-9011453956718594n],

  [-9011455030460414n],
  [-9011455030460415n, IMPRECISE],
  [-9011455030460416n],

  [-99107190693953527n],
  [-99107190693953528n, IMPRECISE],
  [-99107190693953529n, IMPRECISE],
  [-99107190693953530n, IMPRECISE],
  [-99107190693953531n, IMPRECISE],
  [-99107190693953532n, IMPRECISE],
  [-99107190693953533n, IMPRECISE],
  [-99107190693953534n, IMPRECISE],
  [-99107190693953535n, IMPRECISE],
  [-99107190693953536n],

  [-9223372036854775807n],
  [-9223372036854775808n],
];

function u64tof32_js(v) {
  return Math.fround(Number(v));
}

function i64tof32_js(v) {
  return Math.fround(Number(v));
}

values.forEach(([value, isImprecise]) => {
  var expected = value > 0 ? u64tof32_wasm(value) : i64tof32_wasm(value);
  var actual = value > 0 ? u64tof32_wasm2js(value) : i64tof32_wasm2js(value);
  var imprecise = value > 0 ? u64tof32_js(value) : i64tof32_js(value);
  console.log(`i64           : ${value}\ni64->f32      : ${BigInt(expected)}\ni64->f64->f32 : ${BigInt(imprecise)}\n`);
  if (actual != expected) {
    throw Error("[actual] " + actual + " != " + expected + " [expected]");
  }
  if (isImprecise) {
    if (imprecise == expected) throw Error("actually not imprecise: " + value);
  } else {
    if (imprecise != expected) throw Error("actually imprecise: " + value);
  }
});
